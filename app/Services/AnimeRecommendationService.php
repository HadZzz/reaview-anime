<?php namespace App\Services; class AnimeRecommendationService { protected $jikanService; public function __construct(JikanService $jikanService) { $this->jikanService = $jikanService; } public function getRecommendations($anime) { try { $genres = collect($anime['genres'])->pluck('name')->toArray(); $recommendations = []; $topAnime = $this->jikanService->getTopAnime(); if (empty($topAnime)) { return null; } foreach ($topAnime as $result) { if ($result['mal_id'] == $anime['mal_id']) { continue; } $resultGenres = collect($result['genres'])->pluck('name')->toArray(); $matchingGenres = array_intersect($genres, $resultGenres); if (empty($genres)) { $genreMatchScore = 0; } else { $genreMatchScore = count($matchingGenres) / count($genres); } if ($genreMatchScore >= 0.3) { $recommendations[] = [ 'title' => $result['title'], 'reason' => 'Similar genres: ' . implode(', ', $matchingGenres), 'image_url' => $result['images']['jpg']['image_url'] ?? null, 'mal_id' => $result['mal_id'], 'score' => $result['score'], 'match_score' => round($genreMatchScore * 100) . '% genre match' ]; } } usort($recommendations, function($a, $b) { return ($b['score'] ?? 0) <=> ($a['score'] ?? 0); }); return array_slice($recommendations, 0, 5); } catch (\Exception $e) { \Log::error('Error getting recommendations: ' . $e->getMessage()); return null; } } }
